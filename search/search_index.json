{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 import numpy as np import pandas as pd from datetime import datetime !pip install pandas-profiling --user from pandas_profiling import ProfileReport \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 df = pd.read_csv('') \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 df.head() \u041f\u043e\u0438\u0441\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 result = df.groupby('id')['date'].count().sort_values(ascending=False) df.isnull().sum() # \u043a\u043e\u043b-\u0432\u043e \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u041f\u0440\u043e\u0444\u0430\u0439\u043b profile = ProfileReport(df) profile \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 df = df.drop(columns = ['\u043a\u043e\u0434']) \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043b\u043e\u0432\u0430\u0440\u044f c = pd.DataFrame({'\u0441': ['S', 'R', 'M', 'P','S'], \\ '_for_join': [3,3,1,1,7]}) \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 merge1 = df_s.merge(c, how = 'left', left_on = 'c', right_on = 'c') merge1.head() merge2 = merge1.copy() merge2.columns = ['s','s','s','s','s','s','s','s'] merge2.head() merge3 = merge1.copy() merge3.columns = ['e','e','e','e','e','e','e','e'] merge3.head() merge4 = df_t.merge(merge2, how = 'left', left_on = 's',right_on = 's') merge4.head() merge5 = merge4.merge(merge3,how = 'left', left_on = 'e',right_on = 'e' ) merge5.head() merge6 = merge5.drop(columns = ['s','e']) merge6.head() \u041f\u0440\u0438\u043c\u0435\u0440 \u0444-\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a (2) start = df.copy() columns = list(start.columns) new_columns = [] for i in columns: i = 'start_' + i new_columns.append(i) start.columns = new_columns merge7 = merge6.merge(start, how = 'left', left_on = ['d','s'], \\ right_on = ['s','s']) merge7.head() merge8 = merge7.merge(e,how = 'left', left_on = ['d','e'], \\ right_on = ['e','e']) merge8.head() merge8.head().transpose() merge9 = merge8.drop(columns = ['e','e','s',\\ 's','d']) Nan nan_list = pd.DataFrame(merge9.isnull().sum()) nan_list['column_name'] = nan_list.index nan_list.columns = ['count_nan','column_name'] nan_column = nan_list[nan_list['count_nan']>0] nan_column.sort_values(by = 'count_nan') \u0417\u0430\u043c\u0435\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 merge9['s'] = merge9['s'].fillna('without any ') merge9['e'] = merge9['e'].fillna('without any ') \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043d\u0443\u043b\u0435\u0439 \u0432 df merge10 = merge9.dropna() merge10.isna().sum() \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 merge10.to_csv('all merged data.csv', index = False)","title":"\u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430"},{"location":"#_1","text":"","title":"\u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"#_2","text":"import numpy as np import pandas as pd from datetime import datetime !pip install pandas-profiling --user from pandas_profiling import ProfileReport","title":"\u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"#_3","text":"df = pd.read_csv('')","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"#_4","text":"df.head()","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440"},{"location":"#_5","text":"result = df.groupby('id')['date'].count().sort_values(ascending=False) df.isnull().sum() # \u043a\u043e\u043b-\u0432\u043e \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","title":"\u041f\u043e\u0438\u0441\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"#_6","text":"profile = ProfileReport(df) profile","title":"\u041f\u0440\u043e\u0444\u0430\u0439\u043b"},{"location":"#_7","text":"df = df.drop(columns = ['\u043a\u043e\u0434']) \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"#_8","text":"c = pd.DataFrame({'\u0441': ['S', 'R', 'M', 'P','S'], \\ '_for_join': [3,3,1,1,7]})","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043b\u043e\u0432\u0430\u0440\u044f"},{"location":"#_9","text":"merge1 = df_s.merge(c, how = 'left', left_on = 'c', right_on = 'c') merge1.head() merge2 = merge1.copy() merge2.columns = ['s','s','s','s','s','s','s','s'] merge2.head() merge3 = merge1.copy() merge3.columns = ['e','e','e','e','e','e','e','e'] merge3.head() merge4 = df_t.merge(merge2, how = 'left', left_on = 's',right_on = 's') merge4.head() merge5 = merge4.merge(merge3,how = 'left', left_on = 'e',right_on = 'e' ) merge5.head() merge6 = merge5.drop(columns = ['s','e']) merge6.head() \u041f\u0440\u0438\u043c\u0435\u0440 \u0444-\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a (2) start = df.copy() columns = list(start.columns) new_columns = [] for i in columns: i = 'start_' + i new_columns.append(i) start.columns = new_columns merge7 = merge6.merge(start, how = 'left', left_on = ['d','s'], \\ right_on = ['s','s']) merge7.head() merge8 = merge7.merge(e,how = 'left', left_on = ['d','e'], \\ right_on = ['e','e']) merge8.head() merge8.head().transpose() merge9 = merge8.drop(columns = ['e','e','s',\\ 's','d'])","title":"\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"#nan","text":"nan_list = pd.DataFrame(merge9.isnull().sum()) nan_list['column_name'] = nan_list.index nan_list.columns = ['count_nan','column_name'] nan_column = nan_list[nan_list['count_nan']>0] nan_column.sort_values(by = 'count_nan')","title":"Nan"},{"location":"#_10","text":"merge9['s'] = merge9['s'].fillna('without any ') merge9['e'] = merge9['e'].fillna('without any ') \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043d\u0443\u043b\u0435\u0439 \u0432 df merge10 = merge9.dropna() merge10.isna().sum()","title":"\u0417\u0430\u043c\u0435\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439"},{"location":"#_11","text":"merge10.to_csv('all merged data.csv', index = False)","title":"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435"},{"location":"date/","text":"\u041f\u0440\u0438\u043c\u0435\u0440 df['start_date'] = df['start_date'].apply(lambda x: datetime.strptime(x, '%m/%d/%Y %H:%M')) df['end_date'] = df['end_date'].apply(lambda x: datetime.strptime(x, '%m/%d/%Y %H:%M')) \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c date \u0432 datetime object df['date'] = df['date'].apply(lambda x: datetime.strptime(x,'%m/%d/%Y'))","title":"\u0414\u0430\u0442\u044b"},{"location":"date/#_1","text":"df['start_date'] = df['start_date'].apply(lambda x: datetime.strptime(x, '%m/%d/%Y %H:%M')) df['end_date'] = df['end_date'].apply(lambda x: datetime.strptime(x, '%m/%d/%Y %H:%M')) \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c date \u0432 datetime object df['date'] = df['date'].apply(lambda x: datetime.strptime(x,'%m/%d/%Y'))","title":"\u041f\u0440\u0438\u043c\u0435\u0440"},{"location":"graph/","text":"\u0420\u0430\u043e\u0431\u0442\u0430 \u0441 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0439 import matplotlib.pyplot as plt import folium import folium.plugins df.d_count.hist(bins=18); df_.i_date.hist(bins=24, xrot=90); \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 df_s.groupby('c').size().plot.bar(title=\"Number of \"); \u041a\u0430\u0440\u0442\u0430 !pip install -q numpy pandas matplotlib folium import folium import folium.plugins import os import sys hm = df_s.loc[:, ['lat', 'long']].copy() hm.loc[:, 'd_c_n'] = (df_s.dock_count - df_s.d_count.min()) / (df_s.d_count.max() - df_s.d_count.min()) map = folium.Map(location=[df_s.lat.mean(), df_s.long.mean()], zoom_start=10) folium.plugins.HeatMap(hm.values.tolist()).add_to(map) map.save(os.path.join('', 'station_map.html')) map import matplotlib.pyplot as plt df.column1.plot(kind = 'line', color = 'g',label = 'label1',linewidth=1,alpha = 0.5,grid = True,linestyle = ':'); df.column2.plot(color = 'r',label = 'label2',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.'); plt.legend(loc='upper right'); plt.xlabel('x axis'); plt.ylabel('y axis'); plt.title('Line Plot');","title":"\u0413\u0430\u0440\u0444\u0438\u043a\u0438"},{"location":"graph/#_1","text":"import matplotlib.pyplot as plt import folium import folium.plugins df.d_count.hist(bins=18); df_.i_date.hist(bins=24, xrot=90);","title":"\u0420\u0430\u043e\u0431\u0442\u0430 \u0441 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0439"},{"location":"graph/#_2","text":"df_s.groupby('c').size().plot.bar(title=\"Number of \");","title":"\u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"graph/#_3","text":"!pip install -q numpy pandas matplotlib folium import folium import folium.plugins import os import sys hm = df_s.loc[:, ['lat', 'long']].copy() hm.loc[:, 'd_c_n'] = (df_s.dock_count - df_s.d_count.min()) / (df_s.d_count.max() - df_s.d_count.min()) map = folium.Map(location=[df_s.lat.mean(), df_s.long.mean()], zoom_start=10) folium.plugins.HeatMap(hm.values.tolist()).add_to(map) map.save(os.path.join('', 'station_map.html')) map import matplotlib.pyplot as plt df.column1.plot(kind = 'line', color = 'g',label = 'label1',linewidth=1,alpha = 0.5,grid = True,linestyle = ':'); df.column2.plot(color = 'r',label = 'label2',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.'); plt.legend(loc='upper right'); plt.xlabel('x axis'); plt.ylabel('y axis'); plt.title('Line Plot');","title":"\u041a\u0430\u0440\u0442\u0430"}]}